apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "s3proxy.fullname" . }}
  labels:
    {{- include "s3proxy.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "s3proxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "s3proxy.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "s3proxy.serviceAccountName" . }}
      automountServiceAccountToken: false
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          #checkov:skip=CKV_K8S_43: Not for Public Charts
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
            - name: S3PROXY_ENDPOINT
              value: "http://0.0.0.0:{{ .Values.service.port }}"
            - name: S3PROXY_IDENTITY
              valueFrom:
                secretKeyRef:
                  {{- if empty .Values.existingSecretName }}
                  name: "{{ include "s3proxy.fullname" . }}-awsclient"
                  {{- else }}
                  name: {{ .Values.existingSecretName }}
                  {{- end }}
                  key: AWS_ACCESS_KEY_ID
                  optional: false
            - name: S3PROXY_CREDENTIAL
              valueFrom:
                secretKeyRef:
                  {{- if empty .Values.existingSecretName }}
                  name: "{{ include "s3proxy.fullname" . }}-awsclient"
                  {{- else }}
                  name: {{ .Values.existingSecretName }}
                  {{- end }}
                  key: AWS_SECRET_ACCESS_KEY
                  optional: false
            - name: JCLOUDS_PROVIDER
              value: {{ .Values.config.jclouds.provider }}
            {{- if eq .Values.config.jclouds.provider "azureblob" }}
            {{- if eq .Values.config.jclouds.azureblob.auth "azureKey" }}
            - name: JCLOUDS_AZUREBLOB_AUTH
              value: azureKey
            - name: JCLOUDS_AZUREBLOB_TENANTID
              value: {{ .Values.config.jclouds.azureblob.tenantId }}
            - name: JCLOUDS_AZUREBLOB_ACCOUNT
              value: {{ .Values.config.jclouds.azureblob.account }}
            - name: JCLOUDS_ENDPOINT
              value: {{ .Values.config.jclouds.azureblob.endpoint }}
            - name: JCLOUDS_IDENTITY
              value: {{ .Values.config.jclouds.azureblob.account }}
            - name: JCLOUDS_CREDENTIAL
              valueFrom:
                secretKeyRef:
                  {{- if .Values.config.jclouds.azureblob.secretName }}
                  name: {{ .Values.config.jclouds.azureblob.secretName }}
                  {{- else }}
                  name: "{{ include "s3proxy.fullname" . }}-azure"
                  {{- end }}
                  key: JCLOUDS_CREDENTIAL
                  optional: false
            {{- end }}
            {{- end }}
            - name: S3PROXY_V4_MAX_NON_CHUNKED_REQ_SIZE
              value: "100000000"
            {{- with .Values.config.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if eq .Values.config.jclouds.provider "filesystem" }}
          volumeMounts:
          - mountPath: {{ .Values.config.jclouds.filesystem.baseDir | default "/data" }}
            name: tmp-volume
          {{- end }}
      {{- if eq .Values.config.jclouds.provider "filesystem" }}
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: {{ .Values.config.jclouds.filesystem.tmpSize | default "500Mi" }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
